@model PagedList.IPagedList<eLibrary.Model.Book>
@{
    ViewBag.Title = "Index";
    int theQuantity;
}
@helper Truncate(string input, int length)
{
    if (input.Length <= length)
    { @input
    }
    else
    { @input.Substring(0, length)<text>...</text>
    }
}


<h4>SEARCH FOR AN ITEM</h4>

@*<p>
    @Html.ActionLink("Create New", "Create")
</p>*@
@using (Html.BeginForm())
{
    <fieldset>
        <legend>Search Box</legend>

        <table>

            <tr>

                <td>
                    <b>Shelf:</b>
                </td>
                <td>
                    @Html.DropDownList("Shelf", new SelectList((System.Collections.IEnumerable)ViewBag.Shelf, "Value", "Text"))
                </td>
            </tr>

            <tr>

                <td>
                    <b>Item Type:</b>
                </td>
                <td>
                    @Html.DropDownList("ItemType", eLibrary.Model.LevelDictionary.ItemDicoList)
                </td>
            </tr>

            <tr>

                <td>
                    <b>Subject Area: </b>
                </td>
                <td>
                    @Html.DropDownList("SubjectArea", new SelectList((System.Collections.IEnumerable)ViewBag.SubjectArea, "Value", "Text"))
                    &nbsp;

                </td>
            </tr>

            <tr>


                <td>
                    <b>Item/Book Title :</b>
                </td>
                <td>
                    @Html.TextBox("BookTitle")
                    @*    @Html.DropDownList("LevelString", SchoolManagement.Model.LevelDictionary.LevelDicoList)*@
                    &nbsp;
                </td>
            </tr>

            <tr>

                <td>
                    <b>Author Name:</b>
                </td>
                <td>
                    @Html.TextBox("AuthorName") &nbsp;
                </td>
            </tr>


            <tr>


                <td>
                    <b>Publication Year:</b>
                </td>
                <td>
                    @Html.TextBox("PublicationYear", ViewBag.CurrentFilter as string)
                    &nbsp;
                </td>
            </tr>


        </table>
        <input type="submit" value="Search" id="button" />
        <br />
    </fieldset>
}
<fieldset>
    <legend><b>@Model.Count()</b> Item(s) Found</legend>
    <table>
        <tr>
            <th>
                <b>Title</b>
            </th>
            <th>
                <b>Author(s)</b>
            </th>

            <th>
                <b>Type</b>
            </th>
            <th>
                <b>Pages</b>
            </th>
            <th>
                <b>Copies Ava.</b>

            </th>
            <th>
                <b>Copies Bght</b>

            </th>
            @* <th>
                @Html.DisplayNameFor(model => model.ISBN)
            </th>*@

            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ItemTitle)
                </td>
                <td>@* @Html.DisplayFor(modelItem => item.Aurthors)*@
                    @Truncate(item.Aurthors, 15)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.ItemType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PageNumber)
                </td>


                <td>
                    @{
            theQuantity = item.QuantityInStoreIngnoreBorrow - item.BookQuantity;
             
                    }
                    <text>@theQuantity</text>
                    @* @Html.DisplayFor(modelItem => item.BookQuantity)*@
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.QuantityInStoreIngnoreBorrow)
                </td>
                @*  <td>
                    @Html.DisplayFor(modelItem => item.ISBN)
                </td>*@

                <td>
                    @Html.ActionLink("Details", "Details", new { id = item.BookID }) |

                       @if ((Request.IsAuthenticated && HttpContext.Current.User.IsInRole("SuperAdmin")) || (Request.IsAuthenticated && HttpContext.Current.User.IsInRole("Admin")))
                            {
                          @Html.ActionLink("Edit", "Edit", new { id = item.BookID }) <text>|</text>
                         @Html.ActionLink("Delete", "Delete", new { id = item.BookID })
                    }
                </td>
            </tr>
        }
    </table>
    <div>
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)
        of @Model.PageCount
        &nbsp;
    @if (Model.HasPreviousPage)
    {
        @Html.ActionLink("<<", "Index", new { page = 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
        @Html.Raw("&nbsp;");
        @Html.ActionLink("< Prev", "Index", new { page = Model.PageNumber - 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
    }
    else
    {
        @:<<
        @Html.Raw("&nbsp;");
        @:< Prev
    }
        &nbsp;
    @if (Model.HasNextPage)
    {
        @Html.ActionLink("Next >", "Index", new { page = Model.PageNumber + 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
        @Html.Raw("&nbsp;");
        @Html.ActionLink(">>", "Index", new { page = Model.PageCount, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
    }
    else
    {
        @:Next >
        @Html.Raw("&nbsp;")
        @:>>
    }
    </div>
</fieldset>
