@model PagedList.IPagedList<eLibrary.Model.BorrowedItem>
@{
    ViewBag.Title = "Index";
}

<h4>LIST OF BORROWED BOOKS</h4>

<p>
    @* @Html.ActionLink("Create New", "Create")*@
</p>
@using (Html.BeginForm())
{
    <fieldset>
        <legend>Search Box</legend>

        <table>

            <tr>

                <td>
                    <b>Item Type:</b>
                </td>
                <td>
                    @Html.DropDownList("ItemType", eLibrary.Model.LevelDictionary.ItemDicoList)
                </td>
            </tr>

            @* <tr>

                <td>
                    <b>Subject Area: </b>
                </td>
                <td>
                    @Html.DropDownList("SubjectArea", new SelectList((System.Collections.IEnumerable)ViewBag.SubjectArea, "Value", "Text"))
                    &nbsp;

                </td>
            </tr>
*@
            <tr>


                <td>
                    <b>Item/Book Title :</b>
                </td>
                <td>
                    @Html.TextBox("BookTitle")
                    @*    @Html.DropDownList("LevelString", SchoolManagement.Model.LevelDictionary.LevelDicoList)*@
                    &nbsp;
                </td>
            </tr>

            @* <tr>

                <td>
                    <b>Author Name:</b>
                </td>
                <td>
                    @Html.TextBox("AuthorName") &nbsp;
                </td>
            </tr>*@

            <tr>

                <td>
                    <b>Student/Staff ID:</b>
                </td>
                <td>
                    @Html.TextBox("StudentStaffID") &nbsp;
                </td>
            </tr>


            @* <tr>


                <td>
                    <b>Publication Year:</b>
                </td>
                <td>
                    @Html.TextBox("PublicationYear", ViewBag.CurrentFilter as string)
                    &nbsp;
                </td>
            </tr>*@
        </table>
        <input type="submit" value="Search" id="button" />
        <br />
    </fieldset>
}
<table>
    <tr>
        <th>
            <b>Item Name</b>
        </th>
        <th>
            <b>Item Type</b>
        </th>
        <th>
            <b>ISBN/ISBN13</b>
        </th>
        <th>
            <b>Borrowed By</b>
        </th>
        <th>
            <b>Time Borrowed</b>
        </th>
        <th>
            <b>Time To Be Returned</b>
        
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ItemName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ItemType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ISBN)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UserID)
            </td>
            <td>
                @{
        string theDate1 = String.Format("{0:ddd, MMM d, yyyy h:mm:ss tt}", item.TimeBorrowed); 
                }
                <b>@theDate1</b>
                @* @Html.DisplayFor(modelItem => item.TimeBorrowed)*@
            </td>
            <td>
                @{
        string theDate = String.Format("{0:ddd, MMM d, yyyy}", item.TimeToBeReturned); 
                }
                <b>@theDate</b>
                @*    @Html.DisplayFor(modelItem => item.TimeToBeReturned)*@
            </td>
            <td>
             @*   @Html.ActionLink("Edit", "Edit", new { id = item.BorrowedItemID })*@
                @Html.ActionLink("Details", "Details", new { id = item.BorrowedItemID })
                @*   @Html.ActionLink("Delete", "Delete", new { id = item.BorrowedItemID })*@
            </td>
        </tr>
    }
    </table>
     <div>
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)
    of @Model.PageCount
    &nbsp;
    @if (Model.HasPreviousPage)
    {
        @Html.ActionLink("<<", "Index", new { page = 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
        @Html.Raw("&nbsp;");
        @Html.ActionLink("< Prev", "Index", new { page = Model.PageNumber - 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
    }
    else
    {
        @:<<
        @Html.Raw("&nbsp;");
        @:< Prev
    }
    &nbsp;
    @if (Model.HasNextPage)
    {
        @Html.ActionLink("Next >", "Index", new { page = Model.PageNumber + 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
        @Html.Raw("&nbsp;");
        @Html.ActionLink(">>", "Index", new { page = Model.PageCount, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
    }
    else
    {
        @:Next >
        @Html.Raw("&nbsp;")
        @:>>
    }
</div>

